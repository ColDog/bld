package builder

import (
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"

	"github.com/coldog/bld/pkg/template"
	"github.com/xeipuuv/gojsonschema"
)

// Build represents instructions for a single build.
type Build struct {
	// ID is populated when the build starts. This will be a UUID generated by
	// the main packakge.
	ID string `json:"id"`

	// Name represents a human name given to the build target.
	Name string `json:"name"`

	Volumes []Volume `json:"volumes"`
	Sources []Source `json:"sources"`
	Steps   []Step   `json:"steps"`
}

// Digest returns a digest for the build.
func (b Build) Digest() string {
	b.ID = ""
	data, _ := json.Marshal(b)
	h := sha256.New()
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Source will fetch a source if it exists.
func (b Build) Source(name string) (Source, bool) {
	for _, src := range b.Sources {
		if src.Name == name {
			return src, true
		}
	}
	return Source{}, false
}

// Step will fetch a step if it exists.
func (b Build) Step(name string) (Step, bool) {
	for _, step := range b.Steps {
		if step.Name == name {
			s := &step
			if err := template.Struct(s); err != nil {
				panic(err)
			}
			return *s, true
		}
	}
	return Step{}, false
}

// Source is a folder and/or a set of files that are used to execute a specific
// step. They are included in the hash for a given step.
type Source struct {
	Name   string   `json:"name"`
	Target string   `json:"target"`
	Files  []string `json:"files"`
}

// Volume represents mountable cache volumes that can be mounted in the build
// container, these do not count towards the has for the given step.
type Volume struct {
	Name   string `json:"name"`
	Target string `json:"target"`
}

// Mount references a source directory and a mount directory in the container.
type Mount struct {
	Source string `json:"source"`
	Mount  string `json:"mount"`
}

// Image is a committed image.
type Image struct {
	Tag          string   `json:"tag"`
	Entrypoint   []string `json:"entrypoint"`
	Env          []string `json:"env"`
	Workdir      string   `json:"workdir"`
	User         string   `json:"user"`
	Push         bool     `json:"push"`
	RegistryAuth string   `json:"registry_auth"`
}

// Step represents instructions for a step.
type Step struct {
	// Name is required to identify the step.
	Name string `json:"name"`

	// User, ideally run without root.
	User     string   `json:"user"`
	Image    string   `json:"image"`
	Commands []string `json:"commands"`
	Workdir  string   `json:"workdir"`
	Env      []string `json:"env"`

	// Mounts, imports and exports.
	Imports []Mount `json:"imports"`
	Volumes []Mount `json:"volumes"`
	Exports []Mount `json:"exports"`

	// Save will commit a built container.
	Save Image `json:"save"`
}

// StepExec is the set of instructions needed for an executor to perform the
// step.
type StepExec struct {
	Step

	BuildID    string
	BuildDir   string
	RootDir    string
	SourceDirs map[string]string
}

// Validate will validate JSON against the provided schema.
func Validate(json []byte) error {
	loader := gojsonschema.NewStringLoader(schema)
	s, err := gojsonschema.NewSchema(loader)
	if err != nil {
		return err
	}
	r, err := s.Validate(gojsonschema.NewStringLoader(string(json)))
	if err != nil {
		return err
	}
	if !r.Valid() {
		for _, desc := range r.Errors() {
			return fmt.Errorf("%s at %v", desc.Description(), desc.Context().String())
		}
	}
	return nil
}
